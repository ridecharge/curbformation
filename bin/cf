#!/usr/bin/env python
import argparse
import time
import sys
from cf import stacks
from boto import route53
from boto import ec2
from boto import cloudformation
from boto.exception import BotoServerError


def get_stack(options):
    cf_conn = cloudformation.connect_to_region(options.region)
    ec2_conn = ec2.connect_to_region(options.region)
    route53_conn = route53.connect_to_region(options.region)
    if options.name == 'env':
        return stacks.new_environment_stack(cf_conn,
                                            ec2_conn,
                                            route53_conn,
                                            vars(options))
    return stacks.new_application_stack(cf_conn, ec2_conn, vars(options))


def validate(options):
    sys.exit(not get_stack(options).validate())


def create(options):
    print(get_stack(options).create())


def update(options):
    print(get_stack(options).update())


def delete(options):
    print(get_stack(options).delete())


def describe_resource(resources, cf_conn):
    for resource in resources:
        if resource.resource_type == 'AWS::CloudFormation::Stack':
            time.sleep(1)
            describe_resource(
                cf_conn.describe_stacks(resource.physical_resource_id)[0].list_resources(), cf_conn)
        print(resource.logical_resource_id)
        print(resource.physical_resource_id)
        print(resource.resource_type)
        print(resource.resource_status)
        print(resource.resource_status_reason)


def describe(options):
    cf_conn = cloudformation.connect_to_region(options.region)
    stack = get_stack(options).describe()
    describe_resource(stack.list_resources(), cf_conn)

    print(stack.outputs)
    print(stack.parameters)
    print(stack.stack_status)


def register_subparsers(parser, parent_parser):
    subparsers = parser.add_subparsers(title='subcommands', description='valid subcommands',
                                       help='additional help')
    register_subparser(subparsers, parent_parser, 'update', update)
    register_subparser(subparsers, parent_parser, 'delete', delete)
    register_subparser(subparsers, parent_parser, 'create', create)
    register_subparser(subparsers, parent_parser, 'describe', describe)
    register_subparser(subparsers, parent_parser, 'validate', validate)


def register_subparser(subparsers, parent_parser, name, func):
    parser = subparsers.add_parser(name, help='{0} a Stack.'.format(name), parents=[parent_parser])
    parser.set_defaults(func=func)


def get_parent_parser():
    parent_parser = argparse.ArgumentParser(add_help=False)
    parent_parser.add_argument('-n', '--name', help='The stack name.', default='env')
    parent_parser.add_argument('-r', '--region', help='The AWS region to deploy this stack into.',
                               choices=['us-east-1', 'us-west-1'], default='us-east-1')
    parent_parser.add_argument('-e', '--environment',
                               help='The environment name.',
                               default='test')
    return parent_parser


def error_handler(args):
    try:
        args.func(args)
    except BotoServerError as e:
        print(e.body)


def args_error(message, parser):
    parser.print_help()
    print(message)
    exit(1)


def main():
    parser = argparse.ArgumentParser(
        description='Performs operations for Cloudformation Stacks.')
    register_subparsers(parser, get_parent_parser())
    args = parser.parse_args()

    error_handler(args)


if __name__ == '__main__':
    main()

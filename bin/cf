#!/usr/bin/env python
import argparse
import cf
import cf.helpers
from boto.exception import BotoServerError


def validate(options):
    exit(not cf.new_stack(options).validate())


def create(options):
    return cf.new_stack(options).create()


def deploy(options):
    return cf.new_stack(options).deploy()


def delete(options):
    return cf.new_stack(options).delete()


def lock(options):
    return cf.new_stack(options).lock()


def unlock(options):
    return cf.new_stack(options).unlock()


def bootstrap(options):
    return cf.new_environment(options).bootstrap()


def cleanup(options):
    return cf.new_environment(options).cleanup()


def describe(options):
    stack_name = options.environment + "-" + options.name
    return cf.helpers.describe_nested_stacks(stack_name, options.region)


def register_subparsers(parser):
    subparsers = parser.add_subparsers(title='subcommands', description='stack subcommands',
                                       help='subcommands')
    subparsers.required = True
    subparsers.dest = 'subcommand'
    register_subparser(subparsers, 'bootstrap', bootstrap)
    register_subparser(subparsers, 'cleanup', cleanup)
    register_deploy_stack_subparser(subparsers, 'deploy', deploy)
    register_stack_subparser(subparsers, 'lock', lock)
    register_stack_subparser(subparsers, 'unlock', unlock)
    register_stack_subparser(subparsers, 'delete', delete)
    register_versioned_stack_subparser(subparsers, 'create', create)
    register_stack_subparser(subparsers, 'describe', describe)
    register_stack_subparser(subparsers, 'validate', validate)


def register_deploy_stack_subparser(parser, name, func):
    parser = register_versioned_stack_subparser(parser, name, func)
    parser.add_argument('--commit',  action='store_true')
    parser.add_argument('--rollback',  action='store_true')
    return parser


def register_versioned_stack_subparser(subparsers, name, func):
    parser = register_stack_subparser(subparsers, name, func)
    parser.add_argument('--skip-version-check', help='Skips version check before deploying',
                        action='store_true')
    parser.add_argument('-v', '--version', help='The application version to deploy.', default=False)
    return parser


def register_stack_subparser(subparsers, name, func):
    parser = register_subparser(subparsers, name, func)
    parser.add_argument('-n', '--name', help='The stack name')
    parser.add_argument('-H', '--host', help='The consul host.', default='consul')
    parser.add_argument('-p', '--port', help='The consul port.', default='8500')
    return parser


def register_subparser(subparsers, name, func):
    parser = subparsers.add_parser(name)
    parser.add_argument('-r', '--region', help='The AWS region to deploy this stack into.',
                        choices=['us-east-1', 'us-west-1'], default='us-east-1')
    parser.set_defaults(func=func)
    return parser


def get_parser():
    parser = argparse.ArgumentParser(
        description='Performs operations for Curbformation.',
        prog="cf")
    return parser


def error_handler(args):
    try:
        out = args.func(args)
        if not out:
            exit(1)
        print(out)
    except BotoServerError as e:
        print("Error:", e.message)
        exit(1)


def main():
    parser = get_parser()
    register_subparsers(parser)
    args = parser.parse_args()

    error_handler(args)


if __name__ == '__main__':
    main()

#!/usr/bin/env python
import argparse
import sys
import cf
import cf.helpers
from boto.exception import BotoServerError


def validate(options):
    sys.exit(not cf.new_stack(options).validate())


def create(options):
    print(cf.new_stack(options).create())


def update(options):
    print(cf.new_stack(options).update())


def delete(options):
    print(cf.new_stack(options).delete())


def bootstrap(options):
    print(cf.new_environment(options).bootstrap())


def sync(options):
    print(cf.new_environment(options).sync())


def cleanup(options):
    print(cf.new_environment(options).cleanup())


def describe(options):
    stack_name = options.environment + "-" + options.name
    cf.helpers.describe_nested_stacks(stack_name, options.region)


def register_subparsers(parser):
    subparsers = parser.add_subparsers(title='subcommands', description='stack subcommands',
                                       help='subcommands')
    subparsers.required = True
    subparsers.dest = 'subcommand'
    register_subparser(subparsers, 'bootstrap', bootstrap)
    register_subparser(subparsers, 'sync', sync)
    register_subparser(subparsers, 'cleanup', cleanup)
    register_stack_subparser(subparsers, 'update', update)
    register_stack_subparser(subparsers, 'delete', delete)
    register_stack_subparser(subparsers, 'create', create)
    register_stack_subparser(subparsers, 'describe', describe)
    register_stack_subparser(subparsers, 'validate', validate)


def register_stack_subparser(subparsers, name, func):
    parser = register_subparser(subparsers, name, func)
    parser.add_argument('-n', '--name', help='The stack name',
                        default='env')


def register_subparser(subparsers, name, func):
    parser = subparsers.add_parser(name)
    parser.add_argument('-r', '--region', help='The AWS region to deploy this stack into.',
                        choices=['us-east-1', 'us-west-1'], default='us-east-1')
    parser.add_argument('-e', '--environment',
                        help='The environment name.',
                        default='test')
    parser.set_defaults(func=func)
    return parser


def get_parser():
    parser = argparse.ArgumentParser(
        description='Performs operations for Curbformation.',
        prog="cf")
    return parser


def error_handler(args):
    try:
        args.func(args)
    except BotoServerError as e:
        print(e.body)


def args_error(message, parser):
    parser.print_help()
    print(message)
    exit(1)


def main():
    cf.helpers.templates_dir_exists()
    parser = get_parser()
    register_subparsers(parser)
    args = parser.parse_args()

    error_handler(args)


if __name__ == '__main__':
    main()

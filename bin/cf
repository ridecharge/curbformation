#!/usr/bin/env python
import argparse
import time
import sys
import os
import cf
import cf.helpers
from boto.exception import BotoServerError


def validate(options):
    sys.exit(not cf.helpers.get_stack(options).validate())


def create(options):
    print(cf.helpers.get_stack(options).create())


def update(options):
    print(cf.helpers.get_stack(options).update())


def delete(options):
    print(cf.helpers.get_stack(options).delete())


def bootstrap(options):
    print(cf.helpers.get_environment(options).bootstrap())


def sync(options):
    print(cf.helpers.get_environment(options).sync())


def templates_dir_exists():
    if not os.path.isdir('../curbformation'):
        print('The directory ../curbformation must exist to run this command')
        sys.exit(1)


def cleanup(options):
    print(cf.helpers.get_environment(options).cleanup())


def describe_resource(resources, cf_conn):
    for resource in resources:
        if resource.resource_type == 'AWS::CloudFormation::Stack':
            time.sleep(1)
            describe_resource(
                cf_conn.describe_stacks(resource.physical_resource_id)[0].list_resources(), cf_conn)
        print(resource.logical_resource_id)
        print(resource.physical_resource_id)
        print(resource.resource_type)
        print(resource.resource_status)
        print(resource.resource_status_reason)


def describe(options):
    cf_conn = cloudformation.connect_to_region(options.region)
    stack = cf.helpers.get_stack(options).describe()
    describe_resource(stack.list_resources(), cf_conn)

    print(stack.outputs)
    print(stack.parameters)
    print(stack.stack_status)


def register_subparsers(parser):
    subparsers = parser.add_subparsers(title='subcommands', description='stack subcommands',
                                       help='subcommands')
    subparsers.required = True
    subparsers.dest = 'subcommand'
    register_subparser(subparsers, 'bootstrap', bootstrap)
    register_subparser(subparsers, 'sync', sync)
    register_subparser(subparsers, 'cleanup', cleanup)
    register_stack_subparser(subparsers, 'update', update)
    register_stack_subparser(subparsers, 'delete', delete)
    register_stack_subparser(subparsers, 'create', create)
    register_stack_subparser(subparsers, 'describe', describe)
    register_stack_subparser(subparsers, 'validate', validate)


def register_stack_subparser(subparsers, name, func):
    parser = register_subparser(subparsers, name, func)
    parser.add_argument('-n', '--name', help='The stack name',
                        default='env')


def register_subparser(subparsers, name, func):
    parser = subparsers.add_parser(name)
    parser.add_argument('-r', '--region', help='The AWS region to deploy this stack into.',
                        choices=['us-east-1', 'us-west-1'], default='us-east-1')
    parser.add_argument('-e', '--environment',
                        help='The environment name.',
                        default='test')
    parser.set_defaults(func=func)
    return parser


def get_parser():
    parser = argparse.ArgumentParser(
        description='Performs operations for Curbformation.',
        prog="cf")
    return parser


def error_handler(args):
    try:
        args.func(args)
    except BotoServerError as e:
        print(e.body)


def args_error(message, parser):
    parser.print_help()
    print(message)
    exit(1)


def main():
    templates_dir_exists()
    parser = get_parser()
    register_subparsers(parser)
    args = parser.parse_args()

    error_handler(args)


if __name__ == '__main__':
    main()

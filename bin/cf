#!/usr/bin/env python
import argparse
import time
import sys
import os
from cf import stacks
from boto import route53
from boto import ec2
from boto import cloudformation
from boto import sns
from boto import s3
from boto.exception import BotoServerError


def get_stack(options):
    cf_conn = cloudformation.connect_to_region(options.region)
    ec2_conn = ec2.connect_to_region(options.region)
    route53_conn = route53.connect_to_region(options.region)
    if options.name == 'env':
        return stacks.new_environment_stack(cf_conn,
                                            ec2_conn,
                                            route53_conn,
                                            vars(options))
    return stacks.new_application_stack(cf_conn, ec2_conn, vars(options))


def get_bootstrap_environment(options):
    sns_conn = sns.connect_to_region(options.region)
    s3_conn = s3.connect_to_region(options.region)
    ec2_conn = ec2.connect_to_region(options.region)
    return stacks.new_bootstrap_environment(ec2_conn, s3_conn, sns_conn, vars(options))


def validate(options):
    sys.exit(not get_stack(options).validate())


def create(options):
    print(get_stack(options).create())


def update(options):
    print(get_stack(options).update())


def delete(options):
    print(get_stack(options).delete())


def bootstrap(options):
    templates_dir_exists()
    print(get_bootstrap_environment(options).bootstrap())


def sync(options):
    print(get_bootstrap_environment(options).sync())


def templates_dir_exists():
    if not os.path.isdir('../curbformation'):
        print('The directory ../curbformation must exist to run this command')
        sys.exit(1)


def cleanup(options):
    print(get_bootstrap_environment(options).cleanup())


def describe_resource(resources, cf_conn):
    for resource in resources:
        if resource.resource_type == 'AWS::CloudFormation::Stack':
            time.sleep(1)
            describe_resource(
                cf_conn.describe_stacks(resource.physical_resource_id)[0].list_resources(), cf_conn)
        print(resource.logical_resource_id)
        print(resource.physical_resource_id)
        print(resource.resource_type)
        print(resource.resource_status)
        print(resource.resource_status_reason)


def describe(options):
    cf_conn = cloudformation.connect_to_region(options.region)
    stack = get_stack(options).describe()
    describe_resource(stack.list_resources(), cf_conn)

    print(stack.outputs)
    print(stack.parameters)
    print(stack.stack_status)


def register_subparsers(parser):
    subparsers = parser.add_subparsers(title='subcommands', description='stack subcommands',
                                       help='subcommands')
    subparsers.required = True
    subparsers.dest = 'subcommand'
    register_subparser(subparsers, 'bootstrap', bootstrap)
    register_subparser(subparsers, 'sync', sync)
    register_subparser(subparsers, 'cleanup', cleanup)
    register_stack_subparser(subparsers, 'update', update)
    register_stack_subparser(subparsers, 'delete', delete)
    register_stack_subparser(subparsers, 'create', create)
    register_stack_subparser(subparsers, 'describe', describe)
    register_stack_subparser(subparsers, 'validate', validate)


def register_stack_subparser(subparsers, name, func):
    parser = register_subparser(subparsers, name, func)
    parser.add_argument('-n', '--name', help='The stack name',
                        default='env')


def register_subparser(subparsers, name, func):
    parser = subparsers.add_parser(name)
    parser.add_argument('-r', '--region', help='The AWS region to deploy this stack into.',
                        choices=['us-east-1', 'us-west-1'], default='us-east-1')
    parser.add_argument('-e', '--environment',
                        help='The environment name.',
                        default='test')
    parser.set_defaults(func=func)
    return parser


def get_parser():
    parser = argparse.ArgumentParser(
        description='Performs operations for Curbformation.',
        prog="cf")
    return parser


def error_handler(args):
    try:
        args.func(args)
    except BotoServerError as e:
        print(e.body)


def args_error(message, parser):
    parser.print_help()
    print(message)
    exit(1)


def main():
    parser = get_parser()
    register_subparsers(parser)
    args = parser.parse_args()

    error_handler(args)


if __name__ == '__main__':
    main()

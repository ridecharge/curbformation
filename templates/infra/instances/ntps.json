{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "v1.0 Creates NTP Instances",
  "Parameters": {
    "Environment": {
      "Description": "Name of the environment to launch these instances into.",
      "Type": "String",
      "MinLength": "4",
      "MaxLength": "8",
      "AllowedPattern": "[a-z0-9]*",
      "ConstraintDescription": "Can contain 4 to 8 lower case alphanumeric characters."
    },
    "TemplateURLPrefix": {
      "Description": "URL prefix for this stack.",
      "Type": "String"
    },
    "Vpc": {
      "Description": "VPC for this nat.",
      "Type": "AWS::EC2::VPC::Id"
    },
    "VpcName": {
      "Description": "Name of the VPC to create services in.",
      "Type": "String",
      "AllowedValues": [
        "Infrastructure",
        "Application"
      ]
    },
    "PrivateSubnets": {
      "Description": "Subnets to associate private routing.",
      "Type": "String"
    },
    "CidrBlockPrefix": {
      "Description": "CidrBlock for this VPC",
      "Type": "String",
      "MinLength": "3",
      "MaxLength": "7",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})",
      "ConstraintDescription": "Must be the first 2 bytes of a CidrBlock."
    },
    "AvailabilityZones": {
      "Description": "AvailabilityZones to launch networking stacks into.",
      "Type": "String"
    },
    "BastionSecurityGroup": {
      "Type": "String"
    },
    "NTPSecurityGroup": {
      "Type": "String"
    },
    "ImageId": {
      "Description": "AMI for NTP Instances",
      "Type": "String",
      "AllowedPattern": "ami-[a-z0-9]{8}",
      "ConstraintDescription": "Must be a valid ami id"
    },
    "InstanceProfile": {
      "Type": "String"
    }
  },
  "Conditions": {
    "CreateNTPInstances": {
      "Fn::Equals": [
        {"Ref": "VpcName"},
        "Infrastructure"
      ]
    }
  },
  "Resources": {
    "NTPNetworkInterfaces": {
      "Condition": "CreateNTPInstances",
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "Environment": {
            "Ref": "Environment"
          },
          "Subnets": {"Ref": "PrivateSubnets"},
          "Role": "ntp",
          "IpLastDigit": "5",
          "CidrBlockPrefix": {
            "Ref": "CidrBlockPrefix"
          },
          "SecurityGroups": {
            "Fn::Join": [
              ",",
              [
                {"Ref": "NTPSecurityGroup"},
                {"Ref": "BastionSecurityGroup"}
              ]
            ]
          }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              {
                "Ref": "TemplateURLPrefix"
              },
              "infra/autoscaling/static_eni_pair.json"
            ]
          ]
        },
        "TimeoutInMinutes": "30"
      }
    },
    "NTPInstances": {
      "Condition": "CreateNTPInstances",
      "DependsOn": "NTPNetworkInterfaces",
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "Environment": {
            "Ref": "Environment"
          },
          "SecurityGroups": {
            "Fn::Join": [
              ",",
              [
                {
                  "Ref": "NTPSecurityGroup"
                },
                {
                  "Ref": "BastionSecurityGroup"
                }
              ]
            ]
          },
          "Subnets": {
            "Ref": "PrivateSubnets"
          },
          "AvailabilityZones": {
            "Ref": "AvailabilityZones"
          },
          "VpcName": {
            "Ref": "VpcName"
          },
          "InstanceProfile": {"Ref": "InstanceProfile"},
          "ImageId": {"Ref": "ImageId"},
          "Type": "NTP",
          "UserData": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/sh",
                "n=0",
                "until [ $n -ge 5 ]",
                "do",
                "docker run --restart=on-failure:10 sgarlick987/aws-startup-utils ./attach_eni.py && break",
                "n=$((n+1))",
                "sleep 2",
                "done",
                "while [ -z \"$(ifconfig -a | grep eth1)\" ]; do sleep 3s; done;",
                "cat /etc/network/interfaces.d/eth0.cfg | sed 's/eth0/eth1/g' > /etc/network/interfaces.d/eth1.cfg",
                "ifup eth1",
                "echo \"200 out\" >> /etc/iproute2/rt_tables",
                "GATEWAY=$(route -n | awk 'FNR == 3 {print $2}')",
                "PRIVATE_IP=$(ifconfig -a | grep -A 1 eth1 | awk 'FNR == 2 { print $2 }' | sed 's/.*://')",
                "ip route add default via $GATEWAY dev eth1 table out",
                "ip rule add from $PRIVATE_IP/32 table out",
                "ip rule add to $PRIVATE_IP/32 table out",
                "ip route flush cache"
              ]
            ]
          }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              {
                "Ref": "TemplateURLPrefix"
              },
              "infra/autoscaling/autoscaling_pair.json"
            ]
          ]
        },
        "TimeoutInMinutes": "30"
      }
    }
  }
}

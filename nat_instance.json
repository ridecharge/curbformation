{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "Environment": {
      "Description": "Name of the environment this stack represents",
      "Type": "String",
      "MinLength": "4",
      "MaxLength": "14",
      "AllowedPattern": "[-_ a-zA-Z0-9]*",
      "ConstraintDescription": "can contain only alphanumeric characters, spaces, dashes and underscores."
    },
    "SubnetId": {
      "Description": "Public Subnet to launch our NAT into",
      "Type": "String",
      "MinLength": "15",
      "MaxLength": "15",
      "AllowedPattern": "subnet-[a-z0-9]*",
      "ConstraintDescription": "must be a subnetid"
    }
  },
  "Mappings": {
    "RegionMappings": {
      "us-west-1": {
        "AMI": "ami-2b2b296e",
        "EC2URL": "https://ec2.us-west-1.amazonaws.com"
      },
      "us-east-1": {
        "AMI": "ami-4c9e4b24",
        "EC2URL": "https://ec2.us-east-1.amazonaws.com"
      }
    }
  },
  "Resources": {
    "NAT": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": true,
        "IamInstanceProfile": {
          "Ref": "NAT_Instance_Profile"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMappings",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "InstanceType": "c3.large",
        "KeyName": "String",
        "Monitoring": true,
        "SecurityGroupIds": [
          ""
        ],
        "SecurityGroups": [
          ""
        ],
        "SourceDestCheck": false,
        "SubnetId": {
          "Ref": "SubnetIdB"
        },
        "Tags": [
          ""
        ],
        "UserData": {
          "Fn::Join": [
            "\n",
            [
              "cd /root",
              "yum update aws*",
              "echo 1 > /proc/sys/net/ipv4/ip_forward",
              "echo 0 > /proc/sys/net/ipv4/conf/eth0/send_redirects",
              "/sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j MASQUERADE",
              "/sbin/iptables-save > /etc/sysconfig/iptables",
              "mkdir -p /etc/sysctl.d/",
              "cat <<EOF > /etc/sysctl.d/nat.conf",
              "net.ipv4.ip_forward = 1",
              "net.ipv4.conf.eth0.send_redirects = 0",
              "EOF",
              "cat <<EOF > /root/nat_monitor.sh",
              "#!/bin/sh",
              {
                "Fn::Join": [
                  "=",
                  [
                    "NAT_ID",
                    {},
                    "\nNAT_RT_ID",
                    {},
                    "\nMy_RT_ID",
                    {}
                  ]
                ]
              },
              "Num_Pings=3",
              "Ping_Timeout=1",
              "Wait_Between_Pings=2",
              "Wait_for_Instance_Stop=60",
              "Wait_for_Instance_Start=300",
              ". /etc/profile.d/aws-apitools-common.sh",
              "Instance_ID=`/usr/bin/curl --silent http://169.254.169.254/latest/meta-data/instance-id`",
              "NAT_IP=`/opt/aws/bin/ec2-describe-instances $NAT_ID -U $EC2_URL | grep PRIVATEIPADDRESS -m 1 | awk '{print $2;}'`",
              "echo `date` \"-- Starting NAT monitor\"",
              "echo `date` \"-- Adding this instance to $My_RT_ID default route on start\"",
              "/opt/aws/bin/ec2-replace-route $My_RT_ID -r 0.0.0.0/0 -i $Instance_ID -U $EC2_URL",
              "if [ \"$?\" != \"0\" ]; then",
              "/opt/aws/bin/ec2-create-route $My_RT_ID -r 0.0.0.0/0 -i $Instance_ID -U $EC2_URL",
              "fi",
              "while [ . ]; do",
              "pingresult=`ping -c $Num_Pings -W $Ping_Timeout $NAT_IP | grep time= | wc -l`",
              "if [ \"$pingresult\" == \"0\" ]; then",
              "ROUTE_HEALTHY=0",
              "NAT_HEALTHY=0",
              "STOPPING_NAT=0",
              "while [ \"$NAT_HEALTHY\" == \"0\" ]; do",
              "if [ \"$ROUTE_HEALTHY\" == \"0\" ]; then",
              "echo `date` \"-- Other NAT heartbeat failed, taking over $NAT_RT_ID default route\"",
              "/opt/aws/bin/ec2-replace-route $NAT_RT_ID -r 0.0.0.0/0 -i $Instance_ID -U $EC2_URL",
              "ROUTE_HEALTHY=1",
              "fi",
              "NAT_STATE=`/opt/aws/bin/ec2-describe-instances $NAT_ID -U $EC2_URL | grep INSTANCE | awk '{print $4;}'`",
              "if [ \"$NAT_STATE\" == \"stopped\" ]; then",
              "echo `date` \"-- Other NAT instance stopped, starting it back up\"",
              "/opt/aws/bin/ec2-start-instances $NAT_ID -U $EC2_URL",
              "NAT_HEALTHY=1",
              "sleep $Wait_for_Instance_Start",
              "else",
              "if [ \"$STOPPING_NAT\" == \"0\" ]; then",
              "echo `date` \"-- Other NAT instance $NAT_STATE, attempting to stop for reboot\"",
              "/opt/aws/bin/ec2-stop-instances $NAT_ID -U $EC2_URL",
              "STOPPING_NAT=1",
              "fi",
              "sleep $Wait_for_Instance_Stop",
              "fi",
              "done",
              "else",
              "sleep $Wait_Between_Pings",
              "fi",
              "done",
              "EOF",
              "chmod a+x nat_monitor.sh",
              "echo '@reboot /root/nat_monitor.sh >> /tmp/nat_monitor.log' | crontab",
              "./nat_monitor.sh >> /tmp/nat_monitor.log &"
            ]
          ]
        }
      }
    }
  }
}